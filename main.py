import schedule
import telebot
import json
from telebot import types
import info_to_course
import requests
import random
from datetime import datetime
import threading
import time

# Token –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot("7163981394:AAHjvJx0lL32TDWOCRaLkove42L1KFl3hWo")
type_game = False
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
GIPHY_TOKEN = 'XRfycODPWFq9xjduMF6BxaqibbVgVDtN'

HELP = '''
–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/start - –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
/help - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
/Mini_game - –º–∏–Ω–∏ –∏–≥—Ä–∞
/rules_mini_game - –ø—Ä–∞–≤–∏–ª–∞ –º–∏–Ω–∏ –∏–≥—Ä—ã
/Course - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
/find_gif - –ø–æ–ª—É—á–∏—Ç—å –≥–∏—Ñ–∫—É
/registration - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/Magic - —á—É–¥–æ

–£ –±–æ—Ç–∞ –º–æ–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å:
"–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏?"
'''
tutorial_game = "–î–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–ø–æ–¥–æ–±–∏–µ Wordle. " \
                "–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –∏–≥—Ä—ã ‚Äî —É–≥–∞–¥–∞—Ç—å —Å–ø—Ä—è—Ç–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∑–∞ n –ø–æ–ø—ã—Ç–æ–∫. " \
                "–í –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω—ã n, " \
                "—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –±—É–∫–≤—ã –µ—Å—Ç—å –≤ –∏—Å–∫–æ–º–æ–º —Å–ª–æ–≤–µ. " \
                "–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–æ–µ —Å–ª–æ–≤–æ –≤—ã –≤–≤–µ–ª–∏, –±—É–∫–≤—ã –±—É–¥—É—Ç –≤—ã–¥–µ–ª–µ–Ω—ã —Ç—Ä–µ–º—è —Ü–≤–µ—Ç–∞–º–∏. " \
                "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–≥—Ä—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–Ø –≤—Å—ë'"


@bot.message_handler(commands=['Magic'])
def start_handler(message):
    linkss = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
    bot.send_message(message.chat.id,linkss)


# –ü—Ä–∏–≤–µ—Ç—Å–≤–∏–µ —Å –±–æ—Ç–æ–º
@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.reply_to(message, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è –æ–Ω–ª–∞–π–Ω-–±–∞–Ω–∫")


# –£–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç —É –±–æ—Ç–∞
@bot.message_handler(commands=['help'])
def help_handler(message):
    bot.reply_to(message, HELP)


# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(commands=['library'])
def all_users(message):
    with open("User_info.json", "r") as my_file:
        User_info_json = my_file.read()
    User_info = json.loads(User_info_json)
    print(User_info)


# –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
@bot.message_handler(commands=['Course'])
def take_course(message):
    markup = types.InlineKeyboardMarkup()
    btn_ten = types.InlineKeyboardButton(text="–¢–µ–Ω–≥–µ", callback_data="course_tg")
    btn_byn = types.InlineKeyboardButton(text="–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å", callback_data="course_byn")
    btn_dol = types.InlineKeyboardButton(text="–î–æ–ª–ª–∞—Ä", callback_data="course_dol")
    btn_euro = types.InlineKeyboardButton(text="–ï–≤—Ä–æ", callback_data="course_euro")
    markup.row(btn_ten, btn_byn)
    markup.row(btn_dol, btn_euro)
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É", reply_markup=markup)


# –ö–Ω–æ–ø–æ—á–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
@bot.callback_query_handler(func=lambda call: "course" in call.data)
def course_callback(call):
    if call.data == "course_tg":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"–ö—É—Ä—Å —Ç–µ–Ω–≥–µ: {info_to_course.convert_kzt()}")
    if call.data == "course_byn":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"–ö—É—Ä—Å –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ —Ä—É–±–ª—è : {info_to_course.convert_byn()}")
    if call.data == "course_dol":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ : {info_to_course.convert_usd_euro(1)}")
    if call.data == "course_euro":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"–ö—É—Ä—Å –µ–≤—Ä–æ : {info_to_course.convert_usd_euro(2)}")


ans = ''


# –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏ –∏–≥—Ä—ã
@bot.message_handler(commands=['Mini_game'])
def begin(message):
    word_url = 'https://itoven-ai.co/images/words.txt'
    r = requests.get(word_url)
    soup = r.text.split()
    global ans
    ans = str(random.choice(soup)).lower()
    bot.reply_to(message, f"–î–ª–∏–Ω–∞ —Å–ª–æ–≤–∞ {len(ans)}")
    bot.register_next_step_handler(message, play_game)


# –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
def play_game(message):
    if message.text == '—è –≤—Å—ë':
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞–ª–∏ –≤ –º–æ—é –∏–≥—Ä—É")
        return
    if len(message.text) != len(ans):
        bot.reply_to(message, f"–í–≤–µ–¥–∏—Ç–∏ —Å–ª–æ–≤–æ –¥–ª–∏–Ω—ã {len(ans)}")
        bot.register_next_step_handler(message, play_game)
        return
    check_ans = ['üü©'] * 100
    s = message.text
    s = list(s)
    k = [''] * len(ans)
    for j in range(len(s)):
        if (ans[j] == s[j]):
            k[j] = 'üü©'
            s[j] = '-'
    for j in range(len(s)):
        if (s[j] == '-'):
            continue
        for ii in range(len(ans)):
            if (ans[ii] == s[j]):
                k[j] = 'üü®'
                s[j] = '-'
    for j in range(len(s)):
        if (s[j] == '-'):
            continue
        else:
            k[j] = 'üü•'
    ok = 0
    for j in range(len(k)):
        if (k[j] != check_ans[j]):
            ok = 1
            break
    if (ok == 0):
        bot.reply_to(message, f"–í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ {ans}")
        return
    else:
        k = str(k)
        bot.reply_to(message, k)
        bot.register_next_step_handler(message, play_game)


# –ø—Ä–∞–≤–∏–ª–∞ –º–∏–Ω–∏ –∏–≥—Ä—ã
@bot.message_handler(commands=['rules_mini_game'])
def rules(message):
    bot.reply_to(message, tutorial_game)


# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@bot.message_handler(commands=['registration'])
def registration_handler(message):
    if check_client_in_db(message.from_user.id):
        bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(message, name)


# –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def name(message):
    global client
    client = {"id": message.from_user.id, "name": message.text}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    bot.register_next_step_handler(message, surname)


# –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def surname(message):
    client["surname"] = message.text
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É:")
    bot.register_next_step_handler(message, balance)


# –≤–≤–æ–¥ —Å—É–º–º—ã –≤–ª–æ–∂–µ–Ω–∏—è
def balance(message):
    client["balance"] = message.text
    bot.send_message(message.from_user.id, "–°—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏")
    bot.register_next_step_handler(message, email)


# –≤–≤–æ–¥ –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def email(message):
    client["email"] = message.text
    save_client_info()
    bot.send_message(message.from_user.id, f"–°–ø–∞—Å–∏–±–æ, –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n {str(client)}")


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_client_info():
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open('data.txt') as f:
        data = json.load(f)

    data.append(client)

    with open('data.txt', "w") as f:
        json.dump(data, f)
        print("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def check_client_in_db(id):
    with open('data.txt') as f:
        data = json.load(f)
        for i in data:
            if i["id"] == id:
                return True
    return False


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∏—Ñ–∫–∏
def get_gif_by_name(name):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –æ–¥–Ω—É –≥–∏—Ñ–∫—É –ø–æ –ø–æ–∏—Å–∫—É"""

    url = "http://api.giphy.com/v1/gifs/search"

    param = {
        "api_key": GIPHY_TOKEN,
        "rating": "g",
        "q": name,
        "limit": 1,
        "lang": "ru"
    }

    result = requests.get(url, params=param)
    result_dict = result.json()
    # print(json.dumps(result_dict, sort_keys=True, indent=4))
    link_origin = result_dict["data"][0]["images"]["original"]["url"]

    return link_origin


# –ü–æ–∏—Å–∫ –≥–∏—Ñ–∫–∏
@bot.message_handler(commands=['find_gif'])
def find_gif_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã find_gif"""
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞")
    bot.register_next_step_handler(message, get_find_name)


# –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –≥–∏—Ñ–∫–∏
def get_find_name(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –¥–ª—è –≥–∏—Ñ–∫–∏"""
    bot.send_message(message.from_user.id, f"–í–æ—Ç –≤–∞—à–∞ –≥–∏—Ñ–∫–∞:")
    link = get_gif_by_name(message.text)
    bot.send_animation(message.from_user.id, link)


# –≤—ã–≤–æ–¥ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def get_random_image_url():
    response = requests.get("https://source.unsplash.com/random")
    if response.status_code == 200:
        return response.url
    return 1


def get_subscribes_id_list():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ id –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"""
    with open('data.txt') as f:
        data = json.load(f)
        result_id = []
        for i in data:
            result_id.append(i["id"])

    return result_id


def send_random_gif_at_18_00(bot):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""

    def send_gif():
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""

        for client_id in get_subscribes_id_list():
            bot.send_message(client_id, get_random_image_url())

    schedule.every(12).hours.do(send_gif)

    while True:
        schedule.run_pending()
        time.sleep(1)


thread_scheduler = threading.Thread(target=send_random_gif_at_18_00, args=(bot,))
thread_scheduler.start()


# –£–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏
@bot.message_handler(content_types=['text'])
def text_handler(message):
    text = message.text.lower()
    if text == "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏?":
        now = datetime.now()
        current_time = now.strftime("%H:%M")
        bot.send_message(message.chat.id, current_time)


bot.infinity_polling()
